"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import typing

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from corsheaders.defaults import default_headers
from supertokens_python import init, get_all_cors_headers, SupertokensConfig, InputAppInfo
from supertokens_python.recipe import session, thirdpartyemailpassword, thirdparty, emailpassword, passwordless
from supertokens_python.recipe.emailpassword.types import InputFormField
from supertokens_python.recipe.thirdpartyemailpassword import Github, Google, Facebook
from dotenv import load_dotenv
from django.conf import settings
from supertokens_python.recipe.passwordless import (
    ContactPhoneOnlyConfig, CreateAndSendCustomTextMessageParameters, CreateAndSendCustomEmailParameters
)
from supertokens_python.recipe.thirdparty.provider import Provider
from supertokens_python.recipe.thirdparty.types import UserInfo, AccessTokenAPI, AuthorisationRedirectAPI, UserInfoEmail
from httpx import AsyncClient

load_dotenv()

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'f_d6ar@t2n+e@&7b^i^**kzo68w^e*1kn9%40#sp@0v2t#=vs2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

LATEST_URL_WITH_TOKEN = None


async def create_and_send_custom_email(_, url_with_token, __):
    global LATEST_URL_WITH_TOKEN
    setattr(settings, "LATEST_URL_WITH_TOKEN", url_with_token)
    LATEST_URL_WITH_TOKEN = url_with_token


async def validate_age(value):
    try:
        if int(value) < 18:
            return "You must be over 18 to register"
    except Exception:
        pass

    return None

form_fields = [
    InputFormField('name'),
    InputFormField('age', validate=validate_age),
    InputFormField('country', optional=True)
]


def get_api_port():
    return '8083'


def get_website_port():
    return '3031'


def get_website_domain():
    return 'http://localhost:' + get_website_port()


class CustomAuth0Provider(Provider):
    def __init__(self, client_id: str, client_secret: str, domain: str):
        super().__init__('auth0', client_id, False)
        self.domain = domain
        self.client_secret = client_secret
        self.authorisation_redirect_url = "https://" + self.domain + "/authorize"
        self.access_token_api_url = "https://" + self.domain + "/oauth/token"

    async def get_profile_info(self, auth_code_response: any) -> UserInfo:
        access_token: str = auth_code_response['access_token']
        headers = {
            'Authorization': 'Bearer ' + access_token,
        }
        async with AsyncClient() as client:
            response = await client.get(url="https://" + self.domain + "/userinfo", headers=headers)
            user_info = response.json()

            return UserInfo(user_info['sub'], UserInfoEmail(user_info['name'], True))

    def get_authorisation_redirect_api_info(self) -> AuthorisationRedirectAPI:
        params = {
            'scope': 'openid profile',
            'response_type': 'code',
            'client_id': self.client_id,
        }
        return AuthorisationRedirectAPI(
            self.authorisation_redirect_url, params)

    def get_access_token_api_info(
            self, redirect_uri: str, auth_code_from_request: str) -> AccessTokenAPI:
        params = {
            'client_id': self.client_id,
            'client_secret': self.client_secret,
            'grant_type': 'authorization_code',
            'code': auth_code_from_request,
            'redirect_uri': redirect_uri
        }
        return AccessTokenAPI(self.access_token_api_url, params)


CODE_STORE = dict()


async def save_code(param: typing.Union[CreateAndSendCustomTextMessageParameters, CreateAndSendCustomEmailParameters], _):
    global CODE_STORE
    codes = getattr(settings, "CODE_STORE", None)
    if codes is None:
        codes = []
    codes.append({
        'urlWithLinkCode': param.url_with_link_code,
        'userInputCode': param.user_input_code
    })
    CODE_STORE[param.pre_auth_session_id] = codes
    setattr(settings, "CODE_STORE", CODE_STORE)


recipe_list = [
    session.init(),
    emailpassword.init(
        sign_up_feature=emailpassword.InputSignUpFeature(form_fields),
        reset_password_using_token_feature=emailpassword.InputResetPasswordUsingTokenFeature(
            create_and_send_custom_email=create_and_send_custom_email
        ),
        email_verification_feature=emailpassword.InputEmailVerificationConfig(
            create_and_send_custom_email=create_and_send_custom_email
        )
    ),
    thirdparty.init(
        sign_in_and_up_feature=thirdparty.SignInAndUpFeature([
            Google(
                client_id=os.environ.get('GOOGLE_CLIENT_ID'),
                client_secret=os.environ.get('GOOGLE_CLIENT_SECRET')
            ), Facebook(
                client_id=os.environ.get('FACEBOOK_CLIENT_ID'),
                client_secret=os.environ.get('FACEBOOK_CLIENT_SECRET')
            ), Github(
                client_id=os.environ.get('GITHUB_CLIENT_ID'),
                client_secret=os.environ.get('GITHUB_CLIENT_SECRET')
            ), CustomAuth0Provider(
                client_id=os.environ.get('AUTH0_CLIENT_ID'),
                domain=os.environ.get('AUTH0_DOMAIN'),
                client_secret=os.environ.get('AUTH0_CLIENT_SECRET')
            )
        ])
    ),
    thirdpartyemailpassword.init(
        sign_up_feature=thirdpartyemailpassword.InputSignUpFeature(form_fields),
        providers=[
            Google(
                client_id=os.environ.get('GOOGLE_CLIENT_ID'),
                client_secret=os.environ.get('GOOGLE_CLIENT_SECRET')
            ), Facebook(
                client_id=os.environ.get('FACEBOOK_CLIENT_ID'),
                client_secret=os.environ.get('FACEBOOK_CLIENT_SECRET')
            ), Github(
                client_id=os.environ.get('GITHUB_CLIENT_ID'),
                client_secret=os.environ.get('GITHUB_CLIENT_SECRET')
            ), CustomAuth0Provider(
                client_id=os.environ.get('AUTH0_CLIENT_ID'),
                domain=os.environ.get('AUTH0_DOMAIN'),
                client_secret=os.environ.get('AUTH0_CLIENT_SECRET')
            )
        ]
    ),
    passwordless.init(
        contact_config=ContactPhoneOnlyConfig(
            create_and_send_custom_text_message=save_code
        ),
        flow_type='USER_INPUT_CODE_AND_MAGIC_LINK'
    )
]
init(
    supertokens_config=SupertokensConfig('http://localhost:9000'),
    app_info=InputAppInfo(
        app_name="SuperTokens Demo",
        api_domain="0.0.0.0:" + get_api_port(),
        website_domain=get_website_domain()
    ),
    framework='django',
    mode=os.environ.get('APP_MODE', 'asgi'),
    recipe_list=recipe_list,
    telemetry=False
)


ALLOWED_HOSTS = ['localhost']

CORS_ORIGIN_WHITELIST = [
    get_website_domain()
]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    get_website_domain()
]
CORS_ALLOWED_ORIGIN_REGEXES = [
    get_website_domain()
]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    "Content-Type"
] + get_all_cors_headers()

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'mysite.middleware.custom_cors_middleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'supertokens_python.framework.django.django_middleware.middleware',
]

ROOT_URLCONF = 'mysite.urls'
SETTINGS_PATH = os.path.dirname(os.path.dirname(__file__))

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(os.path.dirname(__file__), '../', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'asgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
