from .constants import ERROR_MESSAGE_KEY as ERROR_MESSAGE_KEY, RID_KEY_HEADER as RID_KEY_HEADER
from .exceptions import raise_general_exception as raise_general_exception
from supertokens_python.async_to_sync_wrapper import check_event_loop as check_event_loop
from supertokens_python.framework.django.framework import DjangoFramework as DjangoFramework
from supertokens_python.framework.fastapi.framework import FastapiFramework as FastapiFramework
from supertokens_python.framework.flask.framework import FlaskFramework as FlaskFramework
from supertokens_python.framework.request import BaseRequest as BaseRequest
from supertokens_python.framework.response import BaseResponse as BaseResponse
from typing import Any, Callable, Coroutine, Dict, List, Union

FRAMEWORKS: Any

def is_an_ip_address(ip_address: str) -> bool: ...
def normalise_http_method(method: str) -> str: ...
def get_rid_from_request(request: BaseRequest) -> Union[str, None]: ...
def get_header(request: BaseRequest, key: str) -> Union[str, None]: ...
def find_max_version(versions_1: List[str], versions_2: List[str]) -> Union[str, None]: ...
def compare_version(v1: str, v2: str) -> str: ...
def is_4xx_error(status_code: int) -> bool: ...
def is_5xx_error(status_code: int) -> bool: ...
def send_non_200_response(message: str, status_code: int, response: BaseResponse) -> BaseResponse: ...
def send_200_response(data_json: Dict[str, Any], response: BaseResponse) -> BaseResponse: ...
def get_timestamp_ms() -> int: ...
def utf_base64encode(s: str) -> str: ...
def utf_base64decode(s: str) -> str: ...
def get_filtered_list(func: Callable[[_T], bool], given_list: List[_T]) -> List[_T]: ...
def find_first_occurrence_in_list(condition: Callable[[_T], bool], given_list: List[_T]) -> Union[_T, None]: ...
def execute_in_background(mode: str, func: Callable[[], Coroutine[Any, Any, None]]): ...
def frontend_has_interceptor(request: BaseRequest) -> bool: ...
