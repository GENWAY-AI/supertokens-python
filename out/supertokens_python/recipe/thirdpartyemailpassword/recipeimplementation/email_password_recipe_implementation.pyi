from supertokens_python.recipe.emailpassword.interfaces import CreateResetPasswordResult as CreateResetPasswordResult, RecipeInterface as RecipeInterface, ResetPasswordUsingTokenResult as ResetPasswordUsingTokenResult, SignInResult as SignInResult, SignUpResult as SignUpResult, UpdateEmailOrPasswordResult as UpdateEmailOrPasswordResult
from supertokens_python.recipe.emailpassword.types import User as User
from supertokens_python.recipe.thirdpartyemailpassword.interfaces import RecipeInterface as ThirdPartyEmailPasswordRecipeInterface
from typing import Any, Dict, Union

class RecipeImplementation(RecipeInterface):
    recipe_implementation: Any
    def __init__(self, recipe_implementation: ThirdPartyEmailPasswordRecipeInterface) -> None: ...
    async def get_user_by_id(self, user_id: str, user_context: Dict[str, Any]) -> Union[User, None]: ...
    async def get_user_by_email(self, email: str, user_context: Dict[str, Any]) -> Union[User, None]: ...
    async def create_reset_password_token(self, user_id: str, user_context: Dict[str, Any]) -> CreateResetPasswordResult: ...
    async def reset_password_using_token(self, token: str, new_password: str, user_context: Dict[str, Any]) -> ResetPasswordUsingTokenResult: ...
    async def sign_in(self, email: str, password: str, user_context: Dict[str, Any]) -> SignInResult: ...
    async def sign_up(self, email: str, password: str, user_context: Dict[str, Any]) -> SignUpResult: ...
    async def update_email_or_password(self, user_id: str, email: Union[str, None], password: Union[str, None], user_context: Dict[str, Any]) -> UpdateEmailOrPasswordResult: ...
