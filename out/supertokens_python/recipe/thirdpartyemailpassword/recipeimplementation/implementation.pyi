from ...thirdparty.interfaces import SignInUpResult as SignInUpResult
from ..interfaces import RecipeInterface as RecipeInterface
from ..types import User as User
from supertokens_python.querier import Querier as Querier
from supertokens_python.recipe.emailpassword.interfaces import CreateResetPasswordResult as CreateResetPasswordResult, ResetPasswordUsingTokenResult as ResetPasswordUsingTokenResult, SignInResult as SignInResult, SignUpResult as SignUpResult, UpdateEmailOrPasswordResult as UpdateEmailOrPasswordResult, UpdateEmailOrPasswordUnknownUserIdErrorResult as UpdateEmailOrPasswordUnknownUserIdErrorResult
from typing import Any, Dict, List, Union

class RecipeImplementation(RecipeInterface):
    ep_get_user_by_id: Any
    ep_get_user_by_email: Any
    ep_create_reset_password_token: Any
    ep_reset_password_using_token: Any
    ep_sign_in: Any
    ep_sign_up: Any
    ep_update_email_or_password: Any
    tp_get_user_by_id: Any
    tp_get_users_by_email: Any
    tp_get_user_by_thirdparty_info: Any
    tp_sign_in_up: Any
    def __init__(self, emailpassword_querier: Querier, thirdparty_querier: Union[Querier, None]) -> None: ...
    async def get_user_by_id(self, user_id: str, user_context: Dict[str, Any]) -> Union[User, None]: ...
    async def get_users_by_email(self, email: str, user_context: Dict[str, Any]) -> List[User]: ...
    async def get_user_by_thirdparty_info(self, third_party_id: str, third_party_user_id: str, user_context: Dict[str, Any]) -> Union[User, None]: ...
    async def sign_in_up(self, third_party_id: str, third_party_user_id: str, email: str, email_verified: bool, user_context: Dict[str, Any]) -> SignInUpResult: ...
    async def sign_in(self, email: str, password: str, user_context: Dict[str, Any]) -> SignInResult: ...
    async def sign_up(self, email: str, password: str, user_context: Dict[str, Any]) -> SignUpResult: ...
    async def create_reset_password_token(self, user_id: str, user_context: Dict[str, Any]) -> CreateResetPasswordResult: ...
    async def reset_password_using_token(self, token: str, new_password: str, user_context: Dict[str, Any]) -> ResetPasswordUsingTokenResult: ...
    async def update_email_or_password(self, user_id: str, email: Union[None, str], password: Union[None, str], user_context: Dict[str, Any]) -> UpdateEmailOrPasswordResult: ...
