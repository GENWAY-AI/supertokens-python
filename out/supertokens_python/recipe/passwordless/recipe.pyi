from .api import consume_code as consume_code, create_code as create_code, email_exists as email_exists, phone_number_exists as phone_number_exists, resend_code as resend_code
from .api.implementation import APIImplementation as APIImplementation
from .constants import CONSUME_CODE_API as CONSUME_CODE_API, CREATE_CODE_API as CREATE_CODE_API, DOES_EMAIL_EXIST_API as DOES_EMAIL_EXIST_API, DOES_PHONE_NUMBER_EXIST_API as DOES_PHONE_NUMBER_EXIST_API, RESEND_CODE_API as RESEND_CODE_API
from .exceptions import SuperTokensPasswordlessError as SuperTokensPasswordlessError
from .interfaces import APIOptions as APIOptions, ConsumeCodeOkResult as ConsumeCodeOkResult, RecipeInterface as RecipeInterface
from .recipe_implementation import RecipeImplementation as RecipeImplementation
from .utils import ContactConfig as ContactConfig, OverrideConfig as OverrideConfig, PhoneOrEmailInput as PhoneOrEmailInput, validate_and_normalise_user_input as validate_and_normalise_user_input
from supertokens_python.exceptions import SuperTokensError as SuperTokensError, raise_general_exception as raise_general_exception
from supertokens_python.framework.request import BaseRequest as BaseRequest
from supertokens_python.framework.response import BaseResponse as BaseResponse
from supertokens_python.normalised_url_path import NormalisedURLPath as NormalisedURLPath
from supertokens_python.querier import Querier as Querier
from supertokens_python.recipe_module import APIHandled as APIHandled, RecipeModule as RecipeModule
from supertokens_python.supertokens import AppInfo as AppInfo
from typing import Any, Awaitable, Callable, Dict, List, TypeGuard, Union
from typing_extensions import Literal

class PasswordlessRecipe(RecipeModule):
    recipe_id: str
    config: Any
    recipe_implementation: Any
    api_implementation: Any
    def __init__(self, recipe_id: str, app_info: AppInfo, contact_config: ContactConfig, flow_type: Literal['USER_INPUT_CODE', 'MAGIC_LINK', 'USER_INPUT_CODE_AND_MAGIC_LINK'], override: Union[OverrideConfig, None] = ..., get_link_domain_and_path: Union[Callable[[PhoneOrEmailInput, Dict[str, Any]], Awaitable[str]], None] = ..., get_custom_user_input_code: Union[Callable[[Dict[str, Any]], Awaitable[str]], None] = ...) -> None: ...
    def get_apis_handled(self) -> List[APIHandled]: ...
    async def handle_api_request(self, request_id: str, request: BaseRequest, path: NormalisedURLPath, method: str, response: BaseResponse): ...
    async def handle_error(self, request: BaseRequest, err: SuperTokensError, response: BaseResponse): ...
    def get_all_cors_headers(self) -> List[str]: ...
    def is_error_from_this_recipe_based_on_instance(self, err: Exception) -> TypeGuard[SuperTokensError]: ...
    @staticmethod
    def init(contact_config: ContactConfig, flow_type: Literal['USER_INPUT_CODE', 'MAGIC_LINK', 'USER_INPUT_CODE_AND_MAGIC_LINK'], override: Union[OverrideConfig, None] = ..., get_link_domain_and_path: Union[Callable[[PhoneOrEmailInput, Dict[str, Any]], Awaitable[str]], None] = ..., get_custom_user_input_code: Union[Callable[[Dict[str, Any]], Awaitable[str]], None] = ...): ...
    @staticmethod
    def get_instance() -> PasswordlessRecipe: ...
    @staticmethod
    def reset() -> None: ...
    async def create_magic_link(self, email: Union[str, None], phone_number: Union[str, None], user_context: Dict[str, Any]) -> str: ...
    async def signinup(self, email: Union[str, None], phone_number: Union[str, None], user_context: Dict[str, Any]) -> ConsumeCodeOkResult: ...
