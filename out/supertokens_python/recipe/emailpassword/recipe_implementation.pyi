from .interfaces import CreateResetPasswordOkResult as CreateResetPasswordOkResult, CreateResetPasswordResult as CreateResetPasswordResult, CreateResetPasswordWrongUserIdErrorResult as CreateResetPasswordWrongUserIdErrorResult, RecipeInterface as RecipeInterface, ResetPasswordUsingTokenOkResult as ResetPasswordUsingTokenOkResult, ResetPasswordUsingTokenResult as ResetPasswordUsingTokenResult, ResetPasswordUsingTokenWrongUserIdErrorResult as ResetPasswordUsingTokenWrongUserIdErrorResult, SignInOkResult as SignInOkResult, SignInResult as SignInResult, SignInWrongCredentialsErrorResult as SignInWrongCredentialsErrorResult, SignUpEmailAlreadyExistsErrorResult as SignUpEmailAlreadyExistsErrorResult, SignUpOkResult as SignUpOkResult, SignUpResult as SignUpResult, UpdateEmailOrPasswordEmailAlreadyExistsErrorResult as UpdateEmailOrPasswordEmailAlreadyExistsErrorResult, UpdateEmailOrPasswordOkResult as UpdateEmailOrPasswordOkResult, UpdateEmailOrPasswordResult as UpdateEmailOrPasswordResult, UpdateEmailOrPasswordUnknownUserIdErrorResult as UpdateEmailOrPasswordUnknownUserIdErrorResult
from .types import User as User
from supertokens_python.normalised_url_path import NormalisedURLPath as NormalisedURLPath
from supertokens_python.querier import Querier as Querier
from typing import Any, Dict, Union

class RecipeImplementation(RecipeInterface):
    querier: Any
    def __init__(self, querier: Querier) -> None: ...
    async def get_user_by_id(self, user_id: str, user_context: Dict[str, Any]) -> Union[User, None]: ...
    async def get_user_by_email(self, email: str, user_context: Dict[str, Any]) -> Union[User, None]: ...
    async def create_reset_password_token(self, user_id: str, user_context: Dict[str, Any]) -> CreateResetPasswordResult: ...
    async def reset_password_using_token(self, token: str, new_password: str, user_context: Dict[str, Any]) -> ResetPasswordUsingTokenResult: ...
    async def sign_in(self, email: str, password: str, user_context: Dict[str, Any]) -> SignInResult: ...
    async def sign_up(self, email: str, password: str, user_context: Dict[str, Any]) -> SignUpResult: ...
    async def update_email_or_password(self, user_id: str, email: Union[str, None], password: Union[str, None], user_context: Dict[str, Any]) -> UpdateEmailOrPasswordResult: ...
