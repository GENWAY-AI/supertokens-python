from .interfaces import CreateEmailVerificationTokenEmailAlreadyVerifiedErrorResult as CreateEmailVerificationTokenEmailAlreadyVerifiedErrorResult, CreateEmailVerificationTokenOkResult as CreateEmailVerificationTokenOkResult, CreateEmailVerificationTokenResult as CreateEmailVerificationTokenResult, RecipeInterface as RecipeInterface, RevokeEmailVerificationTokensOkResult as RevokeEmailVerificationTokensOkResult, RevokeEmailVerificationTokensResult as RevokeEmailVerificationTokensResult, UnverifyEmailOkResult as UnverifyEmailOkResult, UnverifyEmailResult as UnverifyEmailResult, VerifyEmailUsingTokenInvalidTokenErrorResult as VerifyEmailUsingTokenInvalidTokenErrorResult, VerifyEmailUsingTokenOkResult as VerifyEmailUsingTokenOkResult, VerifyEmailUsingTokenResult as VerifyEmailUsingTokenResult
from .types import User as User
from .utils import EmailVerificationConfig as EmailVerificationConfig
from supertokens_python.normalised_url_path import NormalisedURLPath as NormalisedURLPath
from supertokens_python.querier import Querier as Querier
from typing import Any, Dict

class RecipeImplementation(RecipeInterface):
    querier: Any
    config: Any
    def __init__(self, querier: Querier, config: EmailVerificationConfig) -> None: ...
    async def create_email_verification_token(self, user_id: str, email: str, user_context: Dict[str, Any]) -> CreateEmailVerificationTokenResult: ...
    async def verify_email_using_token(self, token: str, user_context: Dict[str, Any]) -> VerifyEmailUsingTokenResult: ...
    async def is_email_verified(self, user_id: str, email: str, user_context: Dict[str, Any]) -> bool: ...
    async def revoke_email_verification_tokens(self, user_id: str, email: str, user_context: Dict[str, Any]) -> RevokeEmailVerificationTokensResult: ...
    async def unverify_email(self, user_id: str, email: str, user_context: Dict[str, Any]) -> UnverifyEmailResult: ...
