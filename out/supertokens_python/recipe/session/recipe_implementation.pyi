from . import session_functions as session_functions
from .cookie_and_header import get_access_token_from_cookie as get_access_token_from_cookie, get_anti_csrf_header as get_anti_csrf_header, get_id_refresh_token_from_cookie as get_id_refresh_token_from_cookie, get_refresh_token_from_cookie as get_refresh_token_from_cookie, get_rid_header as get_rid_header
from .exceptions import raise_try_refresh_token_exception as raise_try_refresh_token_exception, raise_unauthorised_exception as raise_unauthorised_exception
from .interfaces import AccessTokenObj as AccessTokenObj, RecipeInterface as RecipeInterface, RegenerateAccessTokenOkResult as RegenerateAccessTokenOkResult, RegenerateAccessTokenResult as RegenerateAccessTokenResult, SessionContainer as SessionContainer, SessionInformationResult as SessionInformationResult, SessionObj as SessionObj
from .session_class import Session as Session
from .utils import SessionConfig as SessionConfig
from supertokens_python.normalised_url_path import NormalisedURLPath as NormalisedURLPath
from supertokens_python.process_state import AllowedProcessStates as AllowedProcessStates, ProcessState as ProcessState
from supertokens_python.querier import Querier as Querier
from supertokens_python.utils import FRAMEWORKS as FRAMEWORKS, execute_in_background as execute_in_background, frontend_has_interceptor as frontend_has_interceptor, get_timestamp_ms as get_timestamp_ms, normalise_http_method as normalise_http_method
from typing import Any, Dict, List, Union

class HandshakeInfo:
    access_token_blacklisting_enabled: Any
    raw_jwt_signing_public_key_list: Any
    anti_csrf: Any
    access_token_validity: Any
    refresh_token_validity: Any
    def __init__(self, info: Dict[str, Any]) -> None: ...
    def set_jwt_signing_public_key_list(self, updated_list: List[Dict[str, Any]]): ...
    def get_jwt_signing_public_key_list(self) -> List[Dict[str, Any]]: ...

class RecipeImplementation(RecipeInterface):
    querier: Any
    config: Any
    handshake_info: Any
    def __init__(self, querier: Querier, config: SessionConfig) -> None: ...
    async def get_handshake_info(self, force_refetch: bool = ...) -> HandshakeInfo: ...
    def update_jwt_signing_public_key_info(self, key_list: Union[List[Dict[str, Any]], None], public_key: str, expiry_time: int): ...
    async def create_new_session(self, request: Any, user_id: str, access_token_payload: Union[None, Dict[str, Any]], session_data: Union[None, Dict[str, Any]], user_context: Dict[str, Any]) -> SessionContainer: ...
    async def get_session(self, request: Any, anti_csrf_check: Union[bool, None], session_required: bool, user_context: Dict[str, Any]) -> Union[SessionContainer, None]: ...
    async def refresh_session(self, request: Any, user_context: Dict[str, Any]) -> SessionContainer: ...
    async def revoke_session(self, session_handle: str, user_context: Dict[str, Any]) -> bool: ...
    async def revoke_all_sessions_for_user(self, user_id: str, user_context: Dict[str, Any]) -> List[str]: ...
    async def get_all_session_handles_for_user(self, user_id: str, user_context: Dict[str, Any]) -> List[str]: ...
    async def revoke_multiple_sessions(self, session_handles: List[str], user_context: Dict[str, Any]) -> List[str]: ...
    async def get_session_information(self, session_handle: str, user_context: Dict[str, Any]) -> SessionInformationResult: ...
    async def update_session_data(self, session_handle: str, new_session_data: Dict[str, Any], user_context: Dict[str, Any]) -> None: ...
    async def update_access_token_payload(self, session_handle: str, new_access_token_payload: Dict[str, Any], user_context: Dict[str, Any]) -> None: ...
    async def get_access_token_lifetime_ms(self, user_context: Dict[str, Any]) -> int: ...
    async def get_refresh_token_lifetime_ms(self, user_context: Dict[str, Any]) -> int: ...
    async def regenerate_access_token(self, access_token: str, new_access_token_payload: Union[Dict[str, Any], None], user_context: Dict[str, Any]) -> RegenerateAccessTokenResult: ...
