from .access_token import get_info_from_access_token as get_info_from_access_token
from .exceptions import TryRefreshTokenError as TryRefreshTokenError, raise_token_theft_exception as raise_token_theft_exception, raise_try_refresh_token_exception as raise_try_refresh_token_exception, raise_unauthorised_exception as raise_unauthorised_exception
from .jwt import get_payload_without_verifying as get_payload_without_verifying
from .recipe_implementation import RecipeImplementation as RecipeImplementation
from supertokens_python.normalised_url_path import NormalisedURLPath as NormalisedURLPath
from supertokens_python.process_state import AllowedProcessStates as AllowedProcessStates, ProcessState as ProcessState
from supertokens_python.recipe.session.interfaces import SessionInformationResult as SessionInformationResult
from typing import Any, Dict, List, Union

async def create_new_session(recipe_implementation: RecipeImplementation, user_id: str, access_token_payload: Union[None, Dict[str, Any]], session_data: Union[None, Dict[str, Any]]): ...
async def get_session(recipe_implementation: RecipeImplementation, access_token: str, anti_csrf_token: Union[str, None], do_anti_csrf_check: bool, contains_custom_header: bool) -> Dict[str, Any]: ...
async def refresh_session(recipe_implementation: RecipeImplementation, refresh_token: str, anti_csrf_token: Union[str, None], contains_custom_header: bool): ...
async def revoke_all_sessions_for_user(recipe_implementation: RecipeImplementation, user_id: str) -> List[str]: ...
async def get_all_session_handles_for_user(recipe_implementation: RecipeImplementation, user_id: str) -> List[str]: ...
async def revoke_session(recipe_implementation: RecipeImplementation, session_handle: str) -> bool: ...
async def revoke_multiple_sessions(recipe_implementation: RecipeImplementation, session_handles: List[str]) -> List[str]: ...
async def update_session_data(recipe_implementation: RecipeImplementation, session_handle: str, new_session_data: Dict[str, Any]): ...
async def update_access_token_payload(recipe_implementation: RecipeImplementation, session_handle: str, new_access_token_payload: Dict[str, Any]): ...
async def get_session_information(recipe_implementation: RecipeImplementation, session_handle: str) -> SessionInformationResult: ...
