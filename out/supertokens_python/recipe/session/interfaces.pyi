import abc
from .utils import SessionConfig as SessionConfig
from abc import ABC, abstractmethod
from supertokens_python.async_to_sync_wrapper import sync as sync
from supertokens_python.framework import BaseRequest as BaseRequest, BaseResponse as BaseResponse
from supertokens_python.recipe.jwt.interfaces import RecipeInterface as JWTRecipeInterface
from typing import Any, Dict, List, Union
from typing_extensions import Literal

class SessionObj:
    handle: Any
    user_id: Any
    user_data_in_jwt: Any
    def __init__(self, handle: str, user_id: str, user_data_in_jwt: Dict[str, Any]) -> None: ...

class AccessTokenObj:
    token: Any
    expiry: Any
    created_time: Any
    def __init__(self, token: str, expiry: int, created_time: int) -> None: ...

class RegenerateAccessTokenResult(ABC):
    status: Any
    session: Any
    access_token: Any
    def __init__(self, status: Literal['OK'], session: SessionObj, access_token: Union[AccessTokenObj, None]) -> None: ...

class RegenerateAccessTokenOkResult(RegenerateAccessTokenResult):
    def __init__(self, session: SessionObj, access_token: Union[AccessTokenObj, None]) -> None: ...

class SessionInformationResult(ABC):
    status: Any
    session_handle: Any
    user_id: Any
    session_data: Any
    expiry: Any
    access_token_payload: Any
    time_created: Any
    def __init__(self, status: Literal['OK'], session_handle: str, user_id: str, session_data: Dict[str, Any], expiry: int, access_token_payload: Dict[str, Any], time_created: int) -> None: ...

class RecipeInterface(ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    @abstractmethod
    async def create_new_session(self, request: Any, user_id: str, access_token_payload: Union[None, Dict[str, Any]], session_data: Union[None, Dict[str, Any]], user_context: Dict[str, Any]) -> SessionContainer: ...
    @abstractmethod
    async def get_session(self, request: Any, anti_csrf_check: Union[bool, None], session_required: bool, user_context: Dict[str, Any]) -> Union[SessionContainer, None]: ...
    @abstractmethod
    async def refresh_session(self, request: Any, user_context: Dict[str, Any]) -> SessionContainer: ...
    @abstractmethod
    async def revoke_session(self, session_handle: str, user_context: Dict[str, Any]) -> bool: ...
    @abstractmethod
    async def revoke_all_sessions_for_user(self, user_id: str, user_context: Dict[str, Any]) -> List[str]: ...
    @abstractmethod
    async def get_all_session_handles_for_user(self, user_id: str, user_context: Dict[str, Any]) -> List[str]: ...
    @abstractmethod
    async def revoke_multiple_sessions(self, session_handles: List[str], user_context: Dict[str, Any]) -> List[str]: ...
    @abstractmethod
    async def get_session_information(self, session_handle: str, user_context: Dict[str, Any]) -> SessionInformationResult: ...
    @abstractmethod
    async def update_session_data(self, session_handle: str, new_session_data: Dict[str, Any], user_context: Dict[str, Any]) -> None: ...
    @abstractmethod
    async def update_access_token_payload(self, session_handle: str, new_access_token_payload: Dict[str, Any], user_context: Dict[str, Any]) -> None: ...
    @abstractmethod
    async def get_access_token_lifetime_ms(self, user_context: Dict[str, Any]) -> int: ...
    @abstractmethod
    async def get_refresh_token_lifetime_ms(self, user_context: Dict[str, Any]) -> int: ...
    @abstractmethod
    async def regenerate_access_token(self, access_token: str, new_access_token_payload: Union[Dict[str, Any], None], user_context: Dict[str, Any]) -> RegenerateAccessTokenResult: ...

class SignOutResponse(metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    @abstractmethod
    def to_json(self) -> Dict[str, Any]: ...

class SignOutOkayResponse(SignOutResponse):
    status: str
    def __init__(self) -> None: ...
    def to_json(self) -> Dict[str, Any]: ...

class APIOptions:
    request: Any
    response: Any
    recipe_id: Any
    config: Any
    recipe_implementation: Any
    def __init__(self, request: BaseRequest, response: Union[None, BaseResponse], recipe_id: str, config: SessionConfig, recipe_implementation: RecipeInterface, jwt_recipe_implementation: Union[JWTRecipeInterface, None]) -> None: ...

class APIInterface(ABC, metaclass=abc.ABCMeta):
    disable_refresh_post: bool
    disable_signout_post: bool
    def __init__(self) -> None: ...
    @abstractmethod
    async def refresh_post(self, api_options: APIOptions, user_context: Dict[str, Any]) -> None: ...
    @abstractmethod
    async def signout_post(self, api_options: APIOptions, user_context: Dict[str, Any]) -> SignOutResponse: ...
    @abstractmethod
    async def verify_session(self, api_options: APIOptions, anti_csrf_check: Union[bool, None], session_required: bool, user_context: Dict[str, Any]) -> Union[SessionContainer, None]: ...

class SessionContainer(ABC, metaclass=abc.ABCMeta):
    recipe_implementation: Any
    access_token: Any
    session_handle: Any
    access_token_payload: Any
    user_id: Any
    new_access_token_info: Any
    new_refresh_token_info: Any
    new_id_refresh_token_info: Any
    new_anti_csrf_token: Any
    remove_cookies: bool
    def __init__(self, recipe_implementation: RecipeInterface, access_token: str, session_handle: str, user_id: str, access_token_payload: Dict[str, Any]) -> None: ...
    @abstractmethod
    async def revoke_session(self, user_context: Union[Any, None] = ...) -> None: ...
    @abstractmethod
    async def get_session_data(self, user_context: Union[Dict[str, Any], None] = ...) -> Dict[str, Any]: ...
    @abstractmethod
    async def update_session_data(self, new_session_data: Dict[str, Any], user_context: Union[Dict[str, Any], None] = ...) -> None: ...
    @abstractmethod
    async def update_access_token_payload(self, new_access_token_payload: Dict[str, Any], user_context: Union[Dict[str, Any], None] = ...) -> None: ...
    @abstractmethod
    def get_user_id(self, user_context: Union[Dict[str, Any], None] = ...) -> str: ...
    @abstractmethod
    def get_access_token_payload(self, user_context: Union[Dict[str, Any], None] = ...) -> Dict[str, Any]: ...
    @abstractmethod
    def get_handle(self, user_context: Union[Dict[str, Any], None] = ...) -> str: ...
    @abstractmethod
    def get_access_token(self, user_context: Union[Dict[str, Any], None] = ...) -> str: ...
    @abstractmethod
    async def get_time_created(self, user_context: Union[Dict[str, Any], None] = ...) -> int: ...
    @abstractmethod
    async def get_expiry(self, user_context: Union[Dict[str, Any], None] = ...) -> int: ...
    def sync_get_expiry(self, user_context: Union[Dict[str, Any], None] = ...) -> int: ...
    def sync_revoke_session(self, user_context: Union[Dict[str, Any], None] = ...) -> None: ...
    def sync_get_session_data(self, user_context: Union[Dict[str, Any], None] = ...) -> Dict[str, Any]: ...
    def sync_get_time_created(self, user_context: Union[Dict[str, Any], None] = ...) -> int: ...
    def sync_update_access_token_payload(self, new_access_token_payload: Dict[str, Any], user_context: Union[Dict[str, Any], None] = ...) -> None: ...
    def sync_update_session_data(self, new_session_data: Dict[str, Any], user_context: Union[Dict[str, Any], None] = ...) -> None: ...
    def __getitem__(self, item: str): ...
